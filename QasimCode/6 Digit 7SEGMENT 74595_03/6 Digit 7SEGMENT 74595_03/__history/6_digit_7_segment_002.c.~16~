#include <16F887.h>
//#device ADC=10
#fuses HS, NOWDT, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP, NOCPD, NOWRT 
#use delay( clock = 20000000 )
//#use rs232( BAUD=4800, RCV=PIN_C7, XMIT=PIN_C6, STREAM=RS232, PARITY=N, BITS=8 )
#zero_ram 
///////////////////////////////////////////////////////////////////////////////
#use fast_io(A)
#use fast_io(B)
#use fast_io(C)
///////////////////////////////////////////////////////////////////////////////
#byte PORTA = 0x05
#byte PORTB = 0x06
#byte PORTC = 0x07
#byte PORTD = 0x08
#byte PORTE = 0x09
///////////////////////////////////////////////////////////////////////////////
//switch actions
#define SET   1
#define RESET  0
#define press 0
#define on  1
#define off  0
#define sw_debounce 20
////////////////////////////////////////////////////////////////////////////////
#bit Enable_SW      = PORTB.1 // Countr Enable switch
#bit SW_1           = PORTB.2 // Reset
#bit SW_2           = PORTB.3 // UP
#bit SW_3           = PORTB.4 // DOWN
#bit SW_4           = PORTB.5// RPM/Setch
/////////////////////////////////////////////////////////////////////////////
static struct system_variables
{
   int1 sec_inc;
   int1 min_inc;
   unsigned int16 m_second;
   unsigned int second;
   unsigned int minute;
   
   int1 initialized;
   unsigned int init_count;
   
   int1 enable_sw, sw_1, sw_2, sw_3, sw_4, sw_r;//setting switch flags
   unsigned int key_press;
   
}system_count;
static struct date_time_variables
{
   int8 times;
   BYTE sec;BYTE min;BYTE hour;BYTE day;BYTE month;BYTE year;BYTE dow;
} time_var;

unsigned int digit, digit1, digit10, digit100,digit1000,digit10000,digit100000;
unsigned int digita, digitb, digitc, digitd;
unsigned int32 Puls_count;
const byte number[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0xFF, 0x6F};
int hours, minutes, hour_10th, hour_unit, minute_10th, minute_unit;

//////////////////////////////////////////////////////////////////////////////
void write_expanded_outputs(BYTE* eo);
void led_display_number(long int data);
///////////////////////////////////////////////////////////////////////////////
#include "stdio.h"
#include "stdlib.h"
#include "internal_eeprom.h"

#include "74595.C"
#include "DS1302.c"
#include "MUX.c"

#include "internal_eeprom.c"
#include "system_counter.c"
//////////////////////////////////////////////////////////////////////////////
#int_ext
void ext_isr(void) //call switch
{
   clear_interrupt(int_ext);
   Puls_count++;
   if(Puls_count > 999999){ Puls_count = 0; }
         
   //delay_ms(20);
  // int_flag = 1; //when interrupt is accure that flag is high
  /* if(input(PIN_B0) == 1)
     s = 1;
   if(s == 1) {
     if(input(PIN_B0) == 0) {
       s = 0;
       Puls_count++;
       if(Puls_count > 999999)
         Puls_count = 0;
     }
   }*/
   //clear_interrupt(int_ext);               
       
} 
///////////////////////////////////////////////////////////////////////////////
#int_TIMER1
void TIMER1_isr( void )
{
   set_timer1( 55295 );
   system_count.m_second++;
   if( system_count.m_second == 488 )
   {
      system_count.m_second = 0;
      system_count.second++;
      system_count.sec_inc = 1;
      if( system_count.second >= 60 )
      {
         system_count.second = 0;
         system_count.minute++;
      }
   }
   
      system_count.enable_sw = Enable_SW;
   
      system_count.sw_1 = SW_1; // Reset
      system_count.sw_2 = SW_2; //UP
      system_count.sw_3 = SW_3; //DOWN
      system_count.sw_4 = SW_4; //RPM
      
restart_wdt();   
}
   


///////////////////////////////////////////////////////////////////////////////
void main()  
{
   set_tris_a(0x00); 
   set_tris_b(0xff);
   set_tris_c(0x00);
   set_tris_d(0x00);
   set_tris_e(0x00);
   rtc_init();
   ext_int_edge(H_TO_L );
   clear_interrupt(INT_EXT);
   enable_interrupts(INT_EXT);
   
   setup_timer_1( T1_INTERNAL );
   enable_interrupts( INT_TIMER1 );
   
   enable_interrupts(GLOBAL);
   hours = 12; minutes = 55;
///////////////////////////////////////////////////////////////////////////////  
   while(true)
   { 
       //Puls_count++;
       //delay_ms(1);
       //data_display(Puls_count, 0); 
       Reset_display( Puls_count, system_count.sw_1 );
       //convert_into_unit (hours, minutes, hour_10th, hour_unit, minute_10th, minute_unit );
       //send_byte_to_display();
       
   }
}

